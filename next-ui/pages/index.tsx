import Head from 'next/head'
import Image from 'next/image'
import { Fragment, useEffect, useState } from 'react'
import { useSpring, animated } from 'react-spring'
import styles from '../styles/Home.module.css'

function useAPI() {
  const [data, setData] = useState("")
  const baseURL = 'http://localhost:8081'

  // if TypeError, abort all requests after?
  async function loadDiff(cmd: string) {
    // if caching, return if already requested
    const data = await (
      fetch(`${baseURL}/commit/${cmd}`)
        .then(data => data)
        .catch(err => ({ text: () => err.message }))
    )
    // todo: response should have diff + files involved 
    // await data.json()
    const text = await data.text();
    // if (data.ok) { 
    //  would be nice to cache texts + avoid requests
    //  but would need some semblance of hash order
    //  and need to change api to:
    //  - send block of hashes
    //  - then client needs to specify hash to get diff
    // }
    setData(text.trim())
  }
  return { data, loadDiff };
}

// better if the API to be more hash orientated
function FrameMenu({ hash, data }) {
  const [menu, setMenu] = useState([])

  useEffect(() => {
    
  }, [hash]) 

  return (
    <>
      {lines.slice(1, -1)
        .map(line => line.split('|'))
        .filter(split => split.length === 2)
        .map(({ [0]: filename}) => (
          <button onClick={() => loadDiff(`curr/${filename.trim()}`)}>
            {filename}
          </button>
        ))
      }
    </>
  )
}

function Frame() {
  const { data, loadDiff } = useAPI()
  const fadeStyle = useSpring({
    from: { opacity: 0.3 },
    to: { opacity: 1 },
    config: { 
      mass: 1, 
      tension: 280, 
      friction: 120,
      frequency: 2,
    },
    reset: true,
  })

  useEffect(() => {
    // load some commits here
    loadDiff('curr/')
    async function handleKey({ code }) {
      console.log(code)
      if (code === 'ArrowLeft') { 
        await loadDiff('prev/')
      }
      if (code === 'ArrowRight') {
        // todo: bound by number of commits
        await loadDiff('next/')
      }
    }
    window?.addEventListener('keydown', handleKey)
    // passive?
    return() => window?.removeEventListener('keydown', handleKey)
  }, [])

  const lines = data.split('\n')
  // rows and cols padded to avoid scrolling + wrapping
  const dims = {
    rows: lines.length + 1,
    cols: Math.max(...lines.map(line => line.length)) + 5,
  }

  return (
    <Fragment>
      <animated.textarea 
        style={fadeStyle} 
        {...dims}
        value={data} 
        readOnly 
      />
      <FrameMenu data={data}>
    </Fragment>
  )
}

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Frame />
      </main>
    </div>
  )
}
